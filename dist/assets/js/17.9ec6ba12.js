(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{487:function(s,t,e){"use strict";e.r(t);var a=e(17),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"electron-应用架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#electron-应用架构"}},[s._v("#")]),s._v(" Electron 应用架构")]),s._v(" "),e("p",[s._v("在我们深入了解Electron的API之前，我们需要探讨一下在Electron中可能遇到的两种进程类型。 它们是完全不同的，因此理解它们非常重要。")]),s._v(" "),e("h2",{attrs:{id:"主进程和渲染器进程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主进程和渲染器进程"}},[s._v("#")]),s._v(" 主进程和渲染器进程")]),s._v(" "),e("p",[s._v("Electron 运行 "),e("code",[s._v("package.json")]),s._v(" 的 "),e("code",[s._v("main")]),s._v(" 脚本的进程被称为"),e("strong",[s._v("主进程")]),s._v("。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。")]),s._v(" "),e("p",[s._v("由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的"),e("strong",[s._v("渲染进程")]),s._v("中。")]),s._v(" "),e("p",[s._v("在普通的浏览器中，web页面通常在沙盒环境中运行，并且无法访问操作系统的原生资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。")]),s._v(" "),e("h3",{attrs:{id:"主进程和渲染进程之间的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#主进程和渲染进程之间的区别"}},[s._v("#")]),s._v(" 主进程和渲染进程之间的区别")]),s._v(" "),e("p",[s._v("主进程使用 "),e("code",[s._v("BrowserWindow")]),s._v(" 实例创建页面。 每个 "),e("code",[s._v("BrowserWindow")]),s._v(" 实例都在自己的渲染进程里运行页面。 当一个 "),e("code",[s._v("BrowserWindow")]),s._v(" 实例被销毁后，相应的渲染进程也会被终止。")]),s._v(" "),e("p",[s._v("主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。")]),s._v(" "),e("p",[s._v("在页面中调用与 GUI 相关的原生 API 是不被允许的，因为在 web 页面里操作原生的 GUI 资源是非常危险的，而且容易造成资源泄露。 如果你想在 web 页面里使用 GUI 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 GUI 操作。")]),s._v(" "),e("blockquote",[e("h4",{attrs:{id:"题外话：进程间通讯"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#题外话：进程间通讯"}},[s._v("#")]),s._v(" 题外话：进程间通讯")]),s._v(" "),e("p",[s._v("Electron为主进程（ main process）和渲染器进程（renderer processes）通信提供了多种实现方式，如可以使用"),e("a",{attrs:{href:"https://www.electronjs.org/docs/api/ipc-renderer",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("ipcRenderer")]),e("OutboundLink")],1),s._v(" 和 "),e("a",{attrs:{href:"https://www.electronjs.org/docs/api/ipc-main",target:"_blank",rel:"noopener noreferrer"}},[e("code",[s._v("ipcMain")]),e("OutboundLink")],1),s._v("模块发送消息，使用 "),e("a",{attrs:{href:"https://www.electronjs.org/docs/api/remote",target:"_blank",rel:"noopener noreferrer"}},[s._v("remote"),e("OutboundLink")],1),s._v("模块进行RPC方式通信。 这里也有一个常见问题解答："),e("a",{attrs:{href:"https://www.electronjs.org/docs/faq#how-to-share-data-between-web-pages",target:"_blank",rel:"noopener noreferrer"}},[s._v("web页面间如何共享数据"),e("OutboundLink")],1),s._v("。")])]),s._v(" "),e("h2",{attrs:{id:"使用electron的api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用electron的api"}},[s._v("#")]),s._v(" 使用Electron的API")]),s._v(" "),e("p",[s._v("Electron在主进程和渲染进程中提供了大量API去帮助开发桌面应用程序， 在主进程和渲染进程中，你可以通过require的方式将其包含在模块中以此，获取Electron的API")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" electron "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'electron'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("所有Electron的API都被指派给一种进程类型。 许多API只能被用于主进程或渲染进程中，但其中一些API可以同时在上述两种进程中使用。 每一个API的文档都将声明你可以在哪种进程中使用该API。")]),s._v(" "),e("p",[s._v("Electron中的窗口是使用"),e("code",[s._v("BrowserWindow")]),s._v("类型创建的一个实例， 它只能在主进程中使用。")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这样写在主进程会有用，但是在渲染进程中会提示'未定义'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" BrowserWindow "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'electron'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" win "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrowserWindow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("p",[s._v("因为进程之间的通信是被允许的, 所以渲染进程可以调用主进程来执行任务。 Electron通过"),e("code",[s._v("remote")]),s._v("模块暴露一些通常只能在主进程中获取到的API。 为了在渲染进程中创建一个"),e("code",[s._v("BrowserWindow")]),s._v("的实例，我们通常使用remote模块为中间件：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//这样写在渲染进程中时行得通的，但是在主进程中是'未定义'")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" remote "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'electron'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" BrowserWindow "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" remote\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" win "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BrowserWindow")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h2",{attrs:{id:"使用-node-js-的-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用-node-js-的-api"}},[s._v("#")]),s._v(" 使用 Node.js 的 API")]),s._v(" "),e("p",[s._v("Electron同时对主进程和渲染进程暴露了Node.js 所有的接口。 这里有两个重要的定义：")]),s._v(" "),e("p",[s._v("1)所有在Node.js可以使用的API，在Electron中同样可以使用。 在Electron中调用如下代码是有用的：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" fs "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'fs'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" root "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" fs"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("readdirSync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'/'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 这会打印出磁盘根级别的所有文件")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 同时包含'/'和'C:\\'。")]),s._v("\nconsole"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("root"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("p",[s._v("正如您可能已经猜到的那样，如果您尝试加载远程内容， 这会带来重大的安全隐患。 您可以在我们的 "),e("a",{attrs:{href:"https://www.electronjs.org/docs/tutorial/security",target:"_blank",rel:"noopener noreferrer"}},[s._v("安全文档 "),e("OutboundLink")],1),s._v("中找到更多有关加载远程内容的信息和指南。")]),s._v(" "),e("p",[s._v("2)你可以在你的应用程序中使用Node.js的模块。 选择您最喜欢的 npm 模块。 npm 提供了目前世界上最大的开源代码库，那里包含了经过良好维护和测试的代码，这些代码之前往往是专门供给服务器应用程序使用的，能够使用这些代码是Electron的重要特色之一。")]),s._v(" "),e("p",[s._v("例如，在你的应用程序中如果要使用官方的AWS SDK，你需要首先将它作为一项依赖进行安装：")]),s._v(" "),e("div",{staticClass:"language-shell script line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[s._v("npm")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" --save aws-sdk\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br")])]),e("p",[s._v("然后在你的Electron应用中，通过require引入并使用该模块，就像构建Node.js应用程序那样：")]),s._v(" "),e("div",{staticClass:"language-javascript line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-javascript"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 准备好被使用的S3 client模块")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[s._v("S3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("require")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v("'aws-sdk/clients/s3'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("有一个非常重要的提示: 原生Node.js模块 (即指，需要编译源码过后才能被使用的模块) 需要在编译后才能和Electron一起使用。")]),s._v(" "),e("p",[s._v("绝大多数的Node.js模块都"),e("em",[s._v("不")]),s._v("是原生的， 在650000个模块中只有400是原生的。 当然了，如果你的确需要原生模块，可以在这里查询"),e("a",{attrs:{href:"https://www.electronjs.org/docs/tutorial/using-native-node-modules",target:"_blank",rel:"noopener noreferrer"}},[s._v("如何重新为Electron编译原生模块"),e("OutboundLink")],1),s._v("(很简单)。")])])}),[],!1,null,null,null);t.default=n.exports}}]);