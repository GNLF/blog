(window.webpackJsonp=window.webpackJsonp||[]).push([[290],{590:function(v,t,e){"use strict";e.r(t);var a=e(17),_=Object(a.a)({},(function(){var v=this,t=v.$createElement,e=v._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[e("h1",{attrs:{id:"vue组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件化"}},[v._v("#")]),v._v(" Vue组件化")]),v._v(" "),e("p",[v._v("如果我们要开发更大型的网页或 web 应用，web 组件化的思维是非常重要的，这也是今天整个前端社区长久不衰的话题。")]),v._v(" "),e("p",[v._v("组件系统是Vue.js其中一个重要的概念，它提供了一种抽象，让我们可以使用独立可复用的小组件来构建大型应用，任意类型的应用界面都可以抽象为一个组件树：")]),v._v(" "),e("p",[e("img",{attrs:{src:"/blog/img/vue/components.png",alt:"Vue"}})]),v._v(" "),e("p",[v._v("组件可以扩展HTML元素，封装可重用的HTML代码，我们可以将组件看作自定义的HTML元素。")]),v._v(" "),e("h2",{attrs:{id:"什么是组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是组件"}},[v._v("#")]),v._v(" 什么是组件")]),v._v(" "),e("p",[v._v("组件其实就是页面组成的一部分，好比是电脑中的每一个元件（如硬盘、键盘、鼠标），它是一个具有独立的逻辑和功能或界面，同时又能根据规定的接口规则进行相互融化，变成一个完整的应用。")]),v._v(" "),e("p",[v._v("页面就是由一个个类似这样的组成部分组成的，比如导航、列表、弹窗、下拉菜单等。页面只不过是这样组件的容器，组件自由组合形成功能完整的界面，当不需要某个组件，或者想要替换某个组件时，可以随时进行替换和删除，而不影响整个应用的运行。、前端组件化的核心思想就是将一个巨大复杂的东西拆分成粒度合理的小东西。")]),v._v(" "),e("h2",{attrs:{id:"使用组件的好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用组件的好处"}},[v._v("#")]),v._v(" 使用组件的好处")]),v._v(" "),e("ol",[e("li",[v._v("提高开发效率")]),v._v(" "),e("li",[v._v("方便重复使用")]),v._v(" "),e("li",[v._v("简化调试步骤")]),v._v(" "),e("li",[v._v("提升整个项目的可维护性")]),v._v(" "),e("li",[v._v("便于协同开发")])]),v._v(" "),e("h2",{attrs:{id:"vue中的组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue中的组件"}},[v._v("#")]),v._v(" Vue中的组件")]),v._v(" "),e("blockquote",[e("p",[v._v("组件 (Component) 是 Vue.js 最强大的功能之一。")])]),v._v(" "),e("p",[v._v("vue中的组件是一个自定义标签，Vue.js的编译器为它添加了特殊功能vue也可以扩展原生的html元素，封装可重用的代码。")]),v._v(" "),e("p",[v._v("所有的 Vue 组件同时也都是 Vue 的实例，所以可接受相同的选项对象 (除了一些根级特有的选项) 并提供相同的生命周期钩子。")]),v._v(" "),e("h3",{attrs:{id:"vue组件基本组成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件基本组成"}},[v._v("#")]),v._v(" Vue组件基本组成")]),v._v(" "),e("ul",[e("li",[v._v("样式结构")]),v._v(" "),e("li",[v._v("行为逻辑")]),v._v(" "),e("li",[v._v("数据")])]),v._v(" "),e("h3",{attrs:{id:"vue组件的分类"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue组件的分类"}},[v._v("#")]),v._v(" Vue组件的分类")]),v._v(" "),e("p",[v._v("一般来说，Vue.js 组件主要分成三类：")]),v._v(" "),e("h4",{attrs:{id:"页面组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#页面组件"}},[v._v("#")]),v._v(" 页面组件")]),v._v(" "),e("p",[v._v("由 vue-router 产生的每个页面，它本质上也是一个组件（.vue），主要承载当前页面的 HTML 结构，会包含数据获取、数据整理、数据可视化等常规业务。整个文件相对较大，但一般不会有 props 选项和 自定义事件，因为它作为路由的渲染，不会被复用，因此也不会对外提供接口。")]),v._v(" "),e("p",[v._v("在项目开发中，我们写的大部分代码都是这类的组件（页面），协同开发时，每人维护自己的页面，很少有交集。这类组件相对是最好写的，因为主要是还原设计稿，完成需求，不需要太多模块和架构设计上的考虑。")]),v._v(" "),e("h4",{attrs:{id:"独立组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#独立组件"}},[v._v("#")]),v._v(" 独立组件")]),v._v(" "),e("p",[v._v("不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。这类组件作为项目的基础控件，会被大量使用，因此组件的 API 进行过高强度的抽象，可以通过不同配置实现不同的功能。比如 iView、Element-UI，就是包含了很多这样基础组件的 UI 组件库。")]),v._v(" "),e("p",[v._v("每个公司都有自己的组件使用规范或组件库，但要开发和维护一套像 iView 这样的组件库，投入的人力和精力还是很重的，所以出于成本考虑，很多项目都会使用已有的开源组件库。")]),v._v(" "),e("p",[v._v("独立组件的开发难度要高于第一类组件，因为它的侧重点是 API 的设计、兼容性、性能、以及复杂的功能。这类组件对 JavaScript 的编程能力有一定要求，也会包含非常多的技巧，比如在不依赖 Vuex 和 Bus（因为独立组件，无法依赖其它库）的情况下，各组件间的通信，还会涉及很多脑壳疼的逻辑，比如日期选择器要考虑不同时区、国家的日历习惯，支持多种日期格式。")]),v._v(" "),e("h4",{attrs:{id:"业务组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#业务组件"}},[v._v("#")]),v._v(" 业务组件")]),v._v(" "),e("p",[v._v("它不像第二类独立组件只包含某个功能，而是在业务中被多个页面复用的，它与独立组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而独立组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。")]),v._v(" "),e("p",[v._v("业务组件更像是介于第一类和第二类之间，在开发上也与独立组件类似，但寄托于项目，你可以使用项目中的技术栈，比如 Vuex、axios、echarts 等，所以它的开发难度相对独立组件要容易点，但也有必要考虑组件的可维护性和复用性。")])])}),[],!1,null,null,null);t.default=_.exports}}]);