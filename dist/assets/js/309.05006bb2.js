(window.webpackJsonp=window.webpackJsonp||[]).push([[309],{532:function(t,e,a){"use strict";a.r(e);var v=a(17),_=Object(v.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"组件化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),a("blockquote",[a("p",[t._v('DRY（Don\'t repeat yourself ），字面意思来看："不要重复自己"。强调的意思就是在进行编程时相同的代码不要重复写，最好只写一次，然后可以在其他地方直接引用。如此一来，可以提高代码重用率，缩减代码量，同时也有助于提高代码的可读性和可维护性。当需要做出更改时，只需要更改一个地方即可。')])]),t._v(" "),a("h2",{attrs:{id:"为什么需要组件化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要组件化"}},[t._v("#")]),t._v(" 为什么需要组件化")]),t._v(" "),a("p",[t._v("现代的大型系统开发一般采用的开发架构都是前后台分离的方式，随着REST架构的发展，后端服务逐步趋向于微服务，简单来说是将一个大型后端服务拆分成多个小服务，他们分别部署，降低了开发的复杂度，而且提高了系统的可伸缩性。而在前端开发方面，随着技术的发展，开发的复杂度也越来越高，传统开发模式总是存在着开发效率低，维护成本高的弊端。")]),t._v(" "),a("p",[t._v("传统开发方式效率低下以及维护成本高的原因在于很多时候是将一个系统做成了整块的应用，而且往往随着业务的增长或者变更，系统的复杂度会呈现指数级的增长，经常出现的情况就是一个小小的改动或者一个小功能的增加可能会引起整体逻辑的修改，造成牵一发而动全身。")]),t._v(" "),a("h2",{attrs:{id:"什么是组件化设计思维"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是组件化设计思维"}},[t._v("#")]),t._v(" 什么是组件化设计思维")]),t._v(" "),a("p",[t._v("我们知道“分子是由原子组成的，分子分成原子，原子也可以重新组合成新的分子”。一个界面是由独立的分子组件搭建而成，分子组件由原子元件构成，这些原子可通过不同的组合方式，组成新分子组件，继而重组构成新的界面。")]),t._v(" "),a("p",[t._v("组件化设计思维是通过对功能及视觉表达中元素的拆解、归纳、重组，并基于可被复用的目的，形成规范化的组件，通过多维度组合来构建整个设计方案，从而提升设计效能。")]),t._v(" "),a("p",[a("strong",[t._v("Component")]),t._v("，中文成为 "),a("strong",[t._v("组件")]),t._v("。使用非常广泛，它的核心意义在于复用，相对模块，对于依赖有更高的要求。")]),t._v(" "),a("p",[t._v("组件化，就像乐高拼图一样，整个网站是由一些组件拼接而成，这些组件可以独立使用，也可以拼接在一起，这样程序员开发时就能按照你的组件进行组件化（模块化）开发，是非常灵活的工作方式。")]),t._v(" "),a("p",[t._v("组件化的工作方式信奉独立、完整、自由组合。目标就是尽可能把设计与开发中的元素独立化，使它具备完整的局部功能，通过自由组合来构成整个产品。")]),t._v(" "),a("p",[t._v("例如计算机这么复杂的工业产品，其思想就是组件化。主板、显卡、CPU、内存、硬盘、风扇、机箱，各部分各司其职，通过组装可以组成完成的电脑，坏了可以更改损坏的部件，升级可以升级指定的部分。")]),t._v(" "),a("h2",{attrs:{id:"组件化开发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件化开发"}},[t._v("#")]),t._v(" 组件化开发")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/img/vue/component1.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("前端组件化开发理念:")]),t._v(" "),a("ul",[a("li",[t._v("页面上的每个独立的 可视/可交互区域视为一个组件；")]),t._v(" "),a("li",[t._v("每个组件对应一个工程目录，组件所需的各种资源都在这个目录下就近维护；")]),t._v(" "),a("li",[t._v("由于组件具有独立性，因此组件与组件之间可以 自由组合；")]),t._v(" "),a("li",[t._v("页面只不过是组件的容器，负责组合组件形成功能完整的界面；")]),t._v(" "),a("li",[t._v("当不需要某个组件，或者想要替换组件时，可以整个目录删除/替换。")])]),t._v(" "),a("h3",{attrs:{id:"良好分工"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#良好分工"}},[t._v("#")]),t._v(" 良好分工")]),t._v(" "),a("p",[t._v("基于这样的工程理念，我们很容易将系统以独立的组件为单元进行分工划分：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/img/vue/component2.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("由于系统功能被分治到独立的模块或组件中，粒度比较精细，组织形式松散，开发者之间不会产生开发时序的依赖，大幅提升并行的开发效率，理论上允许随时加入新成员认领组件开发或维护工作，也更容易支持多个团队共同维护一个大型站点的开发。")]),t._v(" "),a("h3",{attrs:{id:"开发概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开发概念"}},[t._v("#")]),t._v(" 开发概念")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("名称")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("说明")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("举例")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("JS模块")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("独立算法和数据单元")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("浏览器环境监测(detect),网络请求(ajax),应用配置(config),DOM操作(dom),工具函数(utils),以及组件李的JS单元")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("CSS模块")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("独立的功能样式单元")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("栅格系统(grid),字体图标(icon-fonts),动画样式(animate),以及组件里的CSS单元")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("UI组件")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("独立的可视/可交互功能单元")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("页头(header),页尾(footer),导航栏(nav),搜索框(search)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("页面")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("前端这种GUI软件的界面状态，是UI组件的容器")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("首页(index),列表页(list),用户管理(user),搜索结果(search)")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("应用")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("整个项目或整个站点被称之为应用，有多个页面组成")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("-")])])])]),t._v(" "),a("p",[t._v("以上5种开发概念以相对较少的规则组成了前端开发的基本工程结构。")]),t._v(" "),a("h2",{attrs:{id:"组件化图解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件化图解"}},[t._v("#")]),t._v(" 组件化图解")]),t._v(" "),a("p",[t._v("Web应用是由页面组成：\n"),a("img",{attrs:{src:"/blog/img/vue/component3.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("应用中的页面是由组件组成：\n"),a("img",{attrs:{src:"/blog/img/vue/component4.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("应用中组件结构：\n一个组件就是一个目录，资源就近维护\n"),a("img",{attrs:{src:"/blog/img/vue/component5-1.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("组件可组合，组件的JS可以依赖其他JS模块，CSS可依赖其他CSS模块\n"),a("img",{attrs:{src:"/blog/img/vue/component5-2.jpg",alt:"img"}})]),t._v(" "),a("p",[t._v("Web应用目录结构：")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/img/vue/component6.jpg",alt:"img"}})])])}),[],!1,null,null,null);e.default=_.exports}}]);