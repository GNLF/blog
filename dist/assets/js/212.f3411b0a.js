(window.webpackJsonp=window.webpackJsonp||[]).push([[212],{606:function(t,e,a){"use strict";a.r(e);var r=a(17),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"restfulapi介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restfulapi介绍"}},[t._v("#")]),t._v(" RESTfulAPI介绍")]),t._v(" "),a("p",[t._v("现在的网络应用程序，分为前端和后端两个部分， 采用客户端/服务器 模式。")]),t._v(" "),a("p",[t._v("后端建立在分布式体系上，通过互联网通信，具有高延时（high latency）、高并发等特点；前端设备层出不穷（如手机、平板、桌面电脑、其他专用设备......）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/img/node/before.webp",alt:"img"}})]),t._v(" "),a("p",[t._v('因此，必须有一种统一的机制，方便不同的前端设备与后端进行通信。这导致API构架的流行，甚至出现"API First"的设计思想。')]),t._v(" "),a("p",[a("img",{attrs:{src:"/blog/img/node/restfullapi.webp",alt:"img"}})]),t._v(" "),a("p",[t._v("RESTful架构，是目前最流行的一种互联网软件架构。它结构清晰、符合标准、易于理解、扩展方便。RESTful API是目前比较成熟的一套互联网应用程序的API设计理论。")]),t._v(" "),a("h2",{attrs:{id:"restful概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restful概述"}},[t._v("#")]),t._v(" RESTful概述")]),t._v(" "),a("blockquote",[a("p",[t._v("REStful本质是一种软件架构风格，核心是面向资源。")])]),t._v(" "),a("p",[t._v("REST：REpresentational State Transfer，中译为“表现层状态转化”。这个词，是Roy Thomas Fielding在他2000年的博士论文中提出的。")]),t._v(" "),a("p",[t._v("Fielding是HTTP协议（1.0版和1.1版）的主要设计者、Apache服务器软件的作者之一、Apache基金会的第一任主席。")]),t._v(" "),a("p",[t._v("他写的关于RESTful的论文是这样描述的：")]),t._v(" "),a("blockquote",[a("p",[t._v('"本文研究计算机科学两大前沿----软件和网络----的交叉点。长期以来，软件研究主要关注软件设计的分类、设计方法的演化，很少客观地评估不同的设计选择对系统行为的影响。而相反地，网络研究主要关注系统之间通信行为的细节、如何改进特定通信机制的表现，常常忽视了一个事实，那就是改变应用程序的互动风格比改变互动协议，对整体表现有更大的影响。我这篇文章的写作目的，就是想在符合架构原理的前提下，理解和评估以网络为基础的应用软件的架构设计，得到一个功能强、性能好、适宜通信的架构。"')])]),t._v(" "),a("p",[t._v('Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写，翻译为"表现层状态转化"。')]),t._v(" "),a("h2",{attrs:{id:"restful原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restful原则"}},[t._v("#")]),t._v(" RESTful原则")]),t._v(" "),a("p",[t._v("如果一个架构符合REST原则，就称它为RESTful架构。")]),t._v(" "),a("h3",{attrs:{id:"资源（resources）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#资源（resources）"}},[t._v("#")]),t._v(" 资源（Resources）")]),t._v(" "),a("p",[t._v('REST的名称"表现层状态转化"中，省略了主语。"表现层"其实指的是"资源"（Resources）的"表现层"。')]),t._v(" "),a("p",[t._v('所谓"资源"，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实体。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。')]),t._v(" "),a("h3",{attrs:{id:"无状态性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无状态性"}},[t._v("#")]),t._v(" 无状态性")]),t._v(" "),a("p",[t._v("客户端和服务器之间的交互在请求之间是无状态的。")]),t._v(" "),a("p",[t._v("从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合云计算之类的环境。客户端可以缓存数据以改进性能。")]),t._v(" "),a("h3",{attrs:{id:"统一接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#统一接口"}},[t._v("#")]),t._v(" 统一接口")]),t._v(" "),a("p",[t._v("所有资源都共享统一的界面，以便在客户端和服务器之间传输状态。")]),t._v(" "),a("p",[t._v("使用的是标准的 HTTP 方法，使用 GET、PUT、POST 和 DELETE等。Hypermedia 是应用程序状态的引擎，资源表示通过超链接互联。")]),t._v(" "),a("h3",{attrs:{id:"表现层（representation）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表现层（representation）"}},[t._v("#")]),t._v(" 表现层（Representation）")]),t._v(" "),a("p",[t._v('"资源"是一种信息实体，它可以有多种外在表现形式。我们把"资源"具体呈现出来的形式，叫做它的"表现层"（Representation）。 例如：文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。')]),t._v(" "),a("p",[t._v('URI应该只代表"资源"的位置，它的具体表现形式，在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对"表现层"的描述。')]),t._v(" "),a("h3",{attrs:{id:"状态转化（state-transfer）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态转化（state-transfer）"}},[t._v("#")]),t._v(" 状态转化（State Transfer）")]),t._v(" "),a("p",[t._v('访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。 互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生"状态转化"（State Transfer）。而这种转化是建立在表现层之上的，所以就是"表现层状态转化"。')]),t._v(" "),a("h3",{attrs:{id:"简单总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单总结"}},[t._v("#")]),t._v(" 简单总结")]),t._v(" "),a("p",[t._v("什么是RESTful架构：")]),t._v(" "),a("ol",[a("li",[t._v("每一个URI代表一种资源；")]),t._v(" "),a("li",[t._v("客户端和服务器之间，传递这种资源的某种表现层；")]),t._v(" "),a("li",[t._v('客户端通过四个HTTP动词(get、post、put、delete)，对服务器端资源进行操作，实现"表现层状态转化"。')])]),t._v(" "),a("h2",{attrs:{id:"restfulapi的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restfulapi的优点"}},[t._v("#")]),t._v(" RESTfulAPI的优点")]),t._v(" "),a("ul",[a("li",[t._v("可更高效利用缓存来提高响应速度")]),t._v(" "),a("li",[t._v("通讯本身的无状态性可以让不同的服务器的处理一系列请求中的不同请求，提高服务器的扩展性")]),t._v(" "),a("li",[t._v("浏览器即可作为客户端，简化软件需求")]),t._v(" "),a("li",[t._v("相对于其他叠加在HTTP协议之上的机制，REST的软件依赖性更小")]),t._v(" "),a("li",[t._v("不需要额外的资源发现机制")]),t._v(" "),a("li",[t._v("在软件技术演进中的长期的兼容性更好")])])])}),[],!1,null,null,null);e.default=s.exports}}]);