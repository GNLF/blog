(window.webpackJsonp=window.webpackJsonp||[]).push([[438],{909:function(e,s,n){"use strict";n.r(s);var a=n(17),t=Object(a.a)({},(function(){var e=this,s=e.$createElement,n=e._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"自定义组件扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件扩展"}},[e._v("#")]),e._v(" 自定义组件扩展")]),e._v(" "),n("p",[e._v("为了更好定制自定义组件的功能，可以使用自定义组件扩展机制。从小程序基础库版本 "),n("a",{attrs:{href:"https://developers.weixin.qq.com/miniprogram/dev/framework/compatibility.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("2.2.3"),n("OutboundLink")],1),e._v(" 开始支持。")]),e._v(" "),n("h2",{attrs:{id:"扩展后的效果"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#扩展后的效果"}},[e._v("#")]),e._v(" 扩展后的效果")]),e._v(" "),n("p",[e._v("为了更好的理解扩展后的效果，先举一个例子：")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://developers.weixin.qq.com/s/STePQRmH7Q5H",target:"_blank",rel:"noopener noreferrer"}},[e._v("在开发者工具中预览效果"),n("OutboundLink")],1)]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// behavior.js\nmodule.exports = Behavior({\n  definitionFilter(defFields) {\n    defFields.data.from = 'behavior'\n  },\n})\n\n// component.js\nComponent({\n  data: {\n    from: 'component'\n  },\n  behaviors: [require('behavior.js')],\n  ready() {\n    console.log(this.data.from) // 此处会发现输出 behavior 而不是 component\n  }\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br")])]),n("p",[e._v("通过例子可以发现，自定义组件的扩展其实就是提供了修改自定义组件定义段的能力，上述例子就是修改了自定义组件中的 "),n("code",[e._v("data")]),e._v(" 定义段里的内容。")]),e._v(" "),n("h2",{attrs:{id:"使用扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用扩展"}},[e._v("#")]),e._v(" 使用扩展")]),e._v(" "),n("p",[n("code",[e._v("Behavior()")]),e._v(" 构造器提供了新的定义段 "),n("code",[e._v("definitionFilter")]),e._v(" ，用于支持自定义组件扩展。 "),n("code",[e._v("definitionFilter")]),e._v(" 是一个函数，在被调用时会注入两个参数，第一个参数是使用该 behavior 的 component/behavior 的定义对象，第二个参数是该 behavior 所使用的 behavior 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数列表。")]),e._v(" "),n("p",[e._v("以下举个例子来说明：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// behavior3.js\nmodule.exports = Behavior({\n  definitionFilter(defFields, definitionFilterArr) {},\n})\n\n// behavior2.js\nmodule.exports = Behavior({\n  behaviors: [require('behavior3.js')],\n  definitionFilter(defFields, definitionFilterArr) {\n    // definitionFilterArr[0](defFields)\n  },\n})\n\n// behavior1.js\nmodule.exports = Behavior({\n  behaviors: [require('behavior2.js')],\n  definitionFilter(defFields, definitionFilterArr) {},\n})\n\n// component.js\nComponent({\n  behaviors: [require('behavior1.js')],\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("p",[e._v("上述代码中声明了1个自定义组件和3个 behavior，每个 behavior 都使用了 "),n("code",[e._v("definitionFilter")]),e._v(" 定义段。那么按照声明的顺序会有如下事情发生：")]),e._v(" "),n("ol",[n("li",[e._v("当进行 behavior2 的声明时就会调用 behavior3 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数，其中 "),n("code",[e._v("defFields")]),e._v(" 参数是 behavior2 的定义段， "),n("code",[e._v("definitionFilterArr")]),e._v(" 参数即为空数组，因为 behavior3 没有使用其他的 behavior 。")]),e._v(" "),n("li",[e._v("当进行 behavior1 的声明时就会调用 behavior2 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数，其中 "),n("code",[e._v("defFields")]),e._v(" 参数是 behavior1 的定义段， "),n("code",[e._v("definitionFilterArr")]),e._v(" 参数是一个长度为1的数组，"),n("code",[e._v("definitionFilterArr[0]")]),e._v(" 即为 behavior3 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数，因为 behavior2 使用了 behavior3。用户在此处可以自行决定在进行 behavior1 的声明时要不要调用 behavior3 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数，如果需要调用，在此处补充代码 "),n("code",[e._v("definitionFilterArr[0](defFields)")]),e._v(" 即可，"),n("code",[e._v("definitionFilterArr")]),e._v(" 参数会由基础库补充传入。")]),e._v(" "),n("li",[e._v("同理，在进行 component 的声明时就会调用 behavior1 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数。")])]),e._v(" "),n("p",[e._v("简单概括，"),n("code",[e._v("definitionFilter")]),e._v(" 函数可以理解为当 A 使用了 B 时，A 声明就会调用 B 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数并传入 A 的定义对象让 B 去过滤。此时如果 B 还使用了 C 和 D ，那么 B 可以自行决定要不要调用 C 和 D 的 "),n("code",[e._v("definitionFilter")]),e._v(" 函数去过滤 A 的定义对象。")]),e._v(" "),n("p",[n("strong",[e._v("代码示例：")])]),e._v(" "),n("p",[n("a",{attrs:{href:"https://developers.weixin.qq.com/s/WaqPbxmN7E1j",target:"_blank",rel:"noopener noreferrer"}},[e._v("在开发者工具中预览效果"),n("OutboundLink")],1)]),e._v(" "),n("h2",{attrs:{id:"真实案例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#真实案例"}},[e._v("#")]),e._v(" 真实案例")]),e._v(" "),n("p",[e._v("下面利用扩展简单实现自定义组件的计算属性功能:")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// behavior.js\nmodule.exports = Behavior({\n  lifetimes: {\n    created() {\n      this._originalSetData = this.setData // 原始 setData\n      this.setData = this._setData // 封装后的 setData\n    }\n  },\n  definitionFilter(defFields) {\n    const computed = defFields.computed || {}\n    const computedKeys = Object.keys(computed)\n    const computedCache = {}\n\n    // 计算 computed\n    const calcComputed = (scope, insertToData) => {\n      const needUpdate = {}\n      const data = defFields.data = defFields.data || {}\n\n      for (const key of computedKeys) {\n        const value = computed[key].call(scope) // 计算新值\n        if (computedCache[key] !== value) needUpdate[key] = computedCache[key] = value\n        if (insertToData) data[key] = needUpdate[key] // 直接插入到 data 中，初始化时才需要的操作\n      }\n\n      return needUpdate\n    }\n\n    // 重写 setData 方法\n    defFields.methods = defFields.methods || {}\n    defFields.methods._setData = function (data, callback) {\n      const originalSetData = this._originalSetData // 原始 setData\n      originalSetData.call(this, data, callback) // 做 data 的 setData\n      const needUpdate = calcComputed(this) // 计算 computed\n      originalSetData.call(this, needUpdate) // 做 computed 的 setData\n    }\n\n    // 初始化 computed\n    calcComputed(defFields, true) // 计算 computed\n  }\n})\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br"),n("span",{staticClass:"line-number"},[e._v("28")]),n("br"),n("span",{staticClass:"line-number"},[e._v("29")]),n("br"),n("span",{staticClass:"line-number"},[e._v("30")]),n("br"),n("span",{staticClass:"line-number"},[e._v("31")]),n("br"),n("span",{staticClass:"line-number"},[e._v("32")]),n("br"),n("span",{staticClass:"line-number"},[e._v("33")]),n("br"),n("span",{staticClass:"line-number"},[e._v("34")]),n("br"),n("span",{staticClass:"line-number"},[e._v("35")]),n("br"),n("span",{staticClass:"line-number"},[e._v("36")]),n("br"),n("span",{staticClass:"line-number"},[e._v("37")]),n("br"),n("span",{staticClass:"line-number"},[e._v("38")]),n("br"),n("span",{staticClass:"line-number"},[e._v("39")]),n("br"),n("span",{staticClass:"line-number"},[e._v("40")]),n("br")])]),n("p",[e._v("在组件中使用：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const beh = require('./behavior.js')\nComponent({\n  behaviors: [beh],\n  data: {\n    a: 0,\n  },\n  computed: {\n    b() {\n      return this.data.a + 100\n    },\n  },\n  methods: {\n    onTap() {\n      this.setData({\n        a: ++this.data.a,\n      })\n    }\n  }\n})\n<view>data: {{a}}</view>\n<view>computed: {{b}}</view>\n<button bindtap=\"onTap\">click</button>\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br")])]),n("p",[e._v("实现原理很简单，对已有的 setData 进行二次封装，在每次 setData 的时候计算出 computed 里各字段的值，然后设到 data 中，已达到计算属性的效果。")]),e._v(" "),n("blockquote",[n("p",[e._v("此实现只是作为一个简单案例来展示，请勿直接在生产环境中使用。")])]),e._v(" "),n("h2",{attrs:{id:"官方扩展包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#官方扩展包"}},[e._v("#")]),e._v(" 官方扩展包")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://github.com/wechat-miniprogram/computed",target:"_blank",rel:"noopener noreferrer"}},[e._v("computed"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=t.exports}}]);