(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{408:function(s,t,a){"use strict";a.r(t);var e=a(17),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"数据类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型转换"}},[s._v("#")]),s._v(" 数据类型转换")]),s._v(" "),a("h2",{attrs:{id:"强制类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#强制类型转换"}},[s._v("#")]),s._v(" 强制类型转换")]),s._v(" "),a("blockquote",[a("p",[s._v('详见上一节 "内置顶层函数"')])]),s._v(" "),a("ul",[a("li",[s._v("Number() 转换成数值类型")]),s._v(" "),a("li",[s._v("String() 转换成字符串类型")]),s._v(" "),a("li",[s._v("Boolean() 转换成布尔类型")]),s._v(" "),a("li",[s._v("parseInt() 将字符串转换为整型")]),s._v(" "),a("li",[s._v("parseFloat() 转换为浮点型")])]),s._v(" "),a("h2",{attrs:{id:"隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[s._v("#")]),s._v(" 隐式类型转换")]),s._v(" "),a("blockquote",[a("p",[s._v("由于js是弱类型语言，在使用算术运算符时，运算符两边的数据类型可以是任意的。比如，一个字符串可以和数字相加。之所以不同的数据类型之间可以做运算，是因为JavaScript引擎在运算之前会悄悄的把他们进行了"),a("code",[s._v("隐式类型转换")])])]),s._v(" "),a("h3",{attrs:{id:"算数运算符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算数运算符类"}},[s._v("#")]),s._v(" 算数运算符类")]),s._v(" "),a("h4",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" - * / %")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("在进行算术运算，如果操作数不是数值，将会隐式的调用Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("函数，按照这个函数的转换规则进行转换\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" 如果转换不成功，整个表达式返回"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h4",{attrs:{id:"-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#-2"}},[s._v("#")]),s._v(" +")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("  任何数据类型和"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("字符串")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("相加，返回他们拼接的结果。\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v("  如果操作数不包含字符串，则规则同 "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("- * / %")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[s._v("`")])]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"关系运算符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关系运算符类"}},[s._v("#")]),s._v(" 关系运算符类")]),s._v(" "),a("ul",[a("li",[s._v("两个操作数都是"),a("code",[s._v("字符串")]),s._v("，则比较两个字符串对应的字符编码")]),s._v(" "),a("li",[s._v("除此之外，参与比较的数据都会隐式调用"),a("code",[s._v("Number()")]),s._v("进行转换后再比较")])]),s._v(" "),a("h3",{attrs:{id:"逻辑运算符类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑运算符类"}},[s._v("#")]),s._v(" 逻辑运算符类")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("&& || !")]),s._v("运算，会调用 "),a("code",[s._v("Boolean()")]),s._v("函数判断参与逻辑运算的数据的真假性")])]),s._v(" "),a("h3",{attrs:{id:"语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语句"}},[s._v("#")]),s._v(" 语句")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("if")]),s._v("、"),a("code",[s._v("while")]),s._v("、"),a("code",[s._v("do while")]),s._v("语句和"),a("code",[s._v("三元表达式")]),s._v("里面的判断条件表达式会隐式的调用"),a("code",[s._v("Boolean()")]),s._v("函数，按照这个函数的转换规则，转换为相应的布尔值")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 判断一个字符串是否为空")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" str "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"str is true"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])])])}),[],!1,null,null,null);t.default=r.exports}}]);